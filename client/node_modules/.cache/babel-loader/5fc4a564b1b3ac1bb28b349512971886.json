{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.loadScript = void 0;\n\nconst info_1 = require(\"../info\");\n\nconst FAILED_TO_LOAD_ERROR = 'Clerk: Failed to load Clerk';\nconst MISSING_PROVIDER_ERROR = 'Clerk: Missing provider';\nconst MISSING_BODY_ERROR = 'Clerk: Missing <body> element.';\n\nfunction isStaging(frontendApi) {\n  return frontendApi.endsWith('.lclstage.dev') || frontendApi.endsWith('.stgstage.dev') || frontendApi.endsWith('.clerkstage.dev');\n}\n\nfunction extractTag(packageJsonVersion) {\n  return packageJsonVersion.match(/-(.*)\\./);\n}\n\nfunction getScriptSrc(frontendApi, localScriptSrc) {\n  if (localScriptSrc) {\n    return localScriptSrc;\n  }\n\n  const majorVersion = isStaging(frontendApi) ? 'staging' : parseInt(info_1.LIB_VERSION.split('.')[0], 10);\n  const tag = extractTag(info_1.LIB_VERSION);\n  const sourceVersion = tag === null ? majorVersion : 'next';\n  return `https://${frontendApi}/npm/@clerk/clerk-js@${sourceVersion}/dist/clerk.browser.js`;\n}\n\nfunction loadScript(frontendApi, localScriptSrc) {\n  return new Promise((resolve, reject) => {\n    if (global.Clerk) {\n      resolve(null);\n    }\n\n    if (!frontendApi) {\n      reject(MISSING_PROVIDER_ERROR);\n    }\n\n    const script = document.createElement('script');\n    const src = getScriptSrc(frontendApi, localScriptSrc);\n    script.setAttribute('data-clerk-frontend-api', frontendApi);\n    script.setAttribute('crossorigin', 'anonymous');\n    script.async = true;\n\n    if (!document.body) {\n      reject(MISSING_BODY_ERROR);\n    }\n\n    script.addEventListener('load', () => resolve(script));\n    script.addEventListener('error', () => reject(FAILED_TO_LOAD_ERROR));\n    script.src = src;\n    document.body.appendChild(script);\n  });\n}\n\nexports.loadScript = loadScript;","map":{"version":3,"mappings":";;;;;;;AAAA;;AASA,MAAMA,oBAAoB,GAAG,6BAA7B;AACA,MAAMC,sBAAsB,GAAG,yBAA/B;AACA,MAAMC,kBAAkB,GAAG,gCAA3B;;AAEA,SAASC,SAAT,CAAmBC,WAAnB,EAAsC;AACpC,SACEA,WAAW,CAACC,QAAZ,CAAqB,eAArB,KACAD,WAAW,CAACC,QAAZ,CAAqB,eAArB,CADA,IAEAD,WAAW,CAACC,QAAZ,CAAqB,iBAArB,CAHF;AAKD;;AAED,SAASC,UAAT,CAAoBC,kBAApB,EAA8C;AAC5C,SAAOA,kBAAkB,CAACC,KAAnB,CAAyB,SAAzB,CAAP;AACD;;AAED,SAASC,YAAT,CACEL,WADF,EAEEM,cAFF,EAEoC;AAElC,MAAIA,cAAJ,EAAoB;AAClB,WAAOA,cAAP;AACD;;AAED,QAAMC,YAAY,GAAGR,SAAS,CAACC,WAAD,CAAT,GACjB,SADiB,GAEjBQ,QAAQ,CAACC,mBAAYC,KAAZ,CAAkB,GAAlB,EAAuB,CAAvB,CAAD,EAA4B,EAA5B,CAFZ;AAIA,QAAMC,GAAG,GAAGT,UAAU,CAACO,kBAAD,CAAtB;AACA,QAAMG,aAAa,GAAGD,GAAG,KAAK,IAAR,GAAeJ,YAAf,GAA8B,MAApD;AAEA,SAAO,WAAWP,WAAW,wBAAwBY,aAAa,wBAAlE;AACD;;AAED,SAAgBC,UAAhB,CACEb,WADF,EAEEM,cAFF,EAEoC;AAElC,SAAO,IAAIQ,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAoB;AACrC,QAAIC,MAAM,CAACC,KAAX,EAAkB;AAChBH,aAAO,CAAC,IAAD,CAAP;AACD;;AAED,QAAI,CAACf,WAAL,EAAkB;AAChBgB,YAAM,CAACnB,sBAAD,CAAN;AACD;;AAED,UAAMsB,MAAM,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAf;AACA,UAAMC,GAAG,GAAGjB,YAAY,CAACL,WAAD,EAAcM,cAAd,CAAxB;AAEAa,UAAM,CAACI,YAAP,CAAoB,yBAApB,EAA+CvB,WAA/C;AACAmB,UAAM,CAACI,YAAP,CAAoB,aAApB,EAAmC,WAAnC;AACAJ,UAAM,CAACK,KAAP,GAAe,IAAf;;AAEA,QAAI,CAACJ,QAAQ,CAACK,IAAd,EAAoB;AAClBT,YAAM,CAAClB,kBAAD,CAAN;AACD;;AAEDqB,UAAM,CAACO,gBAAP,CAAwB,MAAxB,EAAgC,MAAMX,OAAO,CAACI,MAAD,CAA7C;AACAA,UAAM,CAACO,gBAAP,CAAwB,OAAxB,EAAiC,MAAMV,MAAM,CAACpB,oBAAD,CAA7C;AAEAuB,UAAM,CAACG,GAAP,GAAaA,GAAb;AACAF,YAAQ,CAACK,IAAT,CAAcE,WAAd,CAA0BR,MAA1B;AACD,GAzBM,CAAP;AA0BD;;AA9BDS","names":["FAILED_TO_LOAD_ERROR","MISSING_PROVIDER_ERROR","MISSING_BODY_ERROR","isStaging","frontendApi","endsWith","extractTag","packageJsonVersion","match","getScriptSrc","localScriptSrc","majorVersion","parseInt","info_1","split","tag","sourceVersion","loadScript","Promise","resolve","reject","global","Clerk","script","document","createElement","src","setAttribute","async","body","addEventListener","appendChild","exports"],"sources":["/Users/johnkeane/keanelabs/shopping-list/client/node_modules/@clerk/clerk-react/src/utils/scriptLoader.ts"],"sourcesContent":["import { LIB_VERSION } from '../info';\nimport { BrowserClerk } from '../types';\n\nexport interface Global {\n  Clerk?: BrowserClerk;\n}\n\ndeclare const global: Global;\n\nconst FAILED_TO_LOAD_ERROR = 'Clerk: Failed to load Clerk';\nconst MISSING_PROVIDER_ERROR = 'Clerk: Missing provider';\nconst MISSING_BODY_ERROR = 'Clerk: Missing <body> element.';\n\nfunction isStaging(frontendApi: string): boolean {\n  return (\n    frontendApi.endsWith('.lclstage.dev') ||\n    frontendApi.endsWith('.stgstage.dev') ||\n    frontendApi.endsWith('.clerkstage.dev')\n  );\n}\n\nfunction extractTag(packageJsonVersion: string) {\n  return packageJsonVersion.match(/-(.*)\\./);\n}\n\nfunction getScriptSrc(\n  frontendApi: string,\n  localScriptSrc: string | undefined,\n): string {\n  if (localScriptSrc) {\n    return localScriptSrc;\n  }\n\n  const majorVersion = isStaging(frontendApi)\n    ? 'staging'\n    : parseInt(LIB_VERSION.split('.')[0], 10);\n\n  const tag = extractTag(LIB_VERSION);\n  const sourceVersion = tag === null ? majorVersion : 'next';\n\n  return `https://${frontendApi}/npm/@clerk/clerk-js@${sourceVersion}/dist/clerk.browser.js`;\n}\n\nexport function loadScript(\n  frontendApi: string,\n  localScriptSrc: string | undefined,\n): Promise<HTMLScriptElement | null> {\n  return new Promise((resolve, reject) => {\n    if (global.Clerk) {\n      resolve(null);\n    }\n\n    if (!frontendApi) {\n      reject(MISSING_PROVIDER_ERROR);\n    }\n\n    const script = document.createElement('script');\n    const src = getScriptSrc(frontendApi, localScriptSrc);\n\n    script.setAttribute('data-clerk-frontend-api', frontendApi);\n    script.setAttribute('crossorigin', 'anonymous');\n    script.async = true;\n\n    if (!document.body) {\n      reject(MISSING_BODY_ERROR);\n    }\n\n    script.addEventListener('load', () => resolve(script));\n    script.addEventListener('error', () => reject(FAILED_TO_LOAD_ERROR));\n\n    script.src = src;\n    document.body.appendChild(script);\n  });\n}\n"]},"metadata":{},"sourceType":"script"}