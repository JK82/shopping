{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SignInButton = void 0;\n\nconst tslib_1 = require(\"tslib\");\n\nconst react_1 = (0, tslib_1.__importDefault)(require(\"react\"));\n\nconst contexts_1 = require(\"../contexts\");\n\nconst utils_1 = require(\"../utils\");\n\nexports.SignInButton = (0, contexts_1.withClerk)(_a => {\n  var {\n    clerk,\n    children\n  } = _a,\n      props = (0, tslib_1.__rest)(_a, [\"clerk\", \"children\"]);\n  const {\n    afterSignInUrl,\n    afterSignUpUrl,\n    redirectUrl,\n    mode\n  } = props,\n        rest = (0, tslib_1.__rest)(props, [\"afterSignInUrl\", \"afterSignUpUrl\", \"redirectUrl\", \"mode\"]);\n  children = (0, utils_1.normalizeWithDefaultValue)(children, 'Sign in');\n  const child = (0, utils_1.assertSingleChild)(children)('SignInButton');\n\n  const clickHandler = () => {\n    const opts = {\n      afterSignInUrl,\n      afterSignUpUrl,\n      redirectUrl\n    };\n\n    if (mode === 'modal') {\n      return clerk.openSignIn(opts);\n    }\n\n    return clerk.redirectToSignIn(opts);\n  };\n\n  const wrappedChildClickHandler = async e => {\n    await (0, utils_1.safeExecute)(child.props.onClick)(e);\n    return clickHandler();\n  };\n\n  const childProps = Object.assign(Object.assign({}, rest), {\n    onClick: wrappedChildClickHandler\n  });\n  return react_1.default.cloneElement(child, childProps);\n}, 'SignInButton');","map":{"version":3,"mappings":";;;;;;;;;AAAA;;AAEA;;AAEA;;AAMaA,uBAAe,0BACzBC,EAAD,IAAoE;MAAnE;AAAEC,SAAF;AAASC;AAAT,MAAiBF;MAAKG,KAAK,2BAA3B,qBAA2B;AAC1B,QAAM;AACJC,kBADI;AAEJC,kBAFI;AAGJC,eAHI;AAIJC;AAJI,MAMFJ,KANJ;AAAA,QAKKK,IAAI,uBACLL,KADK,EALH,2DAKG,CALT;AAQAD,UAAQ,GAAG,uCAA0BA,QAA1B,EAAoC,SAApC,CAAX;AACA,QAAMO,KAAK,GAAG,+BAAkBP,QAAlB,EAA4B,cAA5B,CAAd;;AAEA,QAAMQ,YAAY,GAAG,MAAK;AACxB,UAAMC,IAAI,GAAG;AAAEP,oBAAF;AAAkBC,oBAAlB;AAAkCC;AAAlC,KAAb;;AACA,QAAIC,IAAI,KAAK,OAAb,EAAsB;AACpB,aAAON,KAAK,CAACW,UAAN,CAAiBD,IAAjB,CAAP;AACD;;AACD,WAAOV,KAAK,CAACY,gBAAN,CAAuBF,IAAvB,CAAP;AACD,GAND;;AAQA,QAAMG,wBAAwB,GAA4B,MAAMC,CAAN,IAAU;AAClE,UAAM,yBAAaN,KAAa,CAACN,KAAd,CAAoBa,OAAjC,EAA0CD,CAA1C,CAAN;AACA,WAAOL,YAAY,EAAnB;AACD,GAHD;;AAKA,QAAMO,UAAU,mCAAQT,IAAR,GAAY;AAAEQ,WAAO,EAAEF;AAAX,GAAZ,CAAhB;AACA,SAAOI,gBAAMC,YAAN,CAAmBV,KAAnB,EAAyDQ,UAAzD,CAAP;AACD,CA5ByB,EA6B1B,cA7B0B,CAAf","names":["exports","_a","clerk","children","props","afterSignInUrl","afterSignUpUrl","redirectUrl","mode","rest","child","clickHandler","opts","openSignIn","redirectToSignIn","wrappedChildClickHandler","e","onClick","childProps","react_1","cloneElement"],"sources":["/Users/johnkeane/keanelabs/shopping-list/client/node_modules/@clerk/clerk-react/src/components/SignInButton.tsx"],"sourcesContent":["import React from 'react';\n\nimport { withClerk } from '../contexts';\nimport { SignInButtonProps, WithClerkProp } from '../types';\nimport {\n  assertSingleChild,\n  normalizeWithDefaultValue,\n  safeExecute,\n} from '../utils';\n\nexport const SignInButton = withClerk(\n  ({ clerk, children, ...props }: WithClerkProp<SignInButtonProps>) => {\n    const {\n      afterSignInUrl,\n      afterSignUpUrl,\n      redirectUrl,\n      mode,\n      ...rest\n    } = props;\n\n    children = normalizeWithDefaultValue(children, 'Sign in');\n    const child = assertSingleChild(children)('SignInButton');\n\n    const clickHandler = () => {\n      const opts = { afterSignInUrl, afterSignUpUrl, redirectUrl };\n      if (mode === 'modal') {\n        return clerk.openSignIn(opts);\n      }\n      return clerk.redirectToSignIn(opts);\n    };\n\n    const wrappedChildClickHandler: React.MouseEventHandler = async e => {\n      await safeExecute((child as any).props.onClick)(e);\n      return clickHandler();\n    };\n\n    const childProps = { ...rest, onClick: wrappedChildClickHandler };\n    return React.cloneElement(child as React.ReactElement<unknown>, childProps);\n  },\n  'SignInButton',\n);\n"]},"metadata":{},"sourceType":"script"}