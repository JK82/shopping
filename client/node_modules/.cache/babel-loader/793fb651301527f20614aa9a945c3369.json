{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SignInWithMetamaskButton = void 0;\n\nconst tslib_1 = require(\"tslib\");\n\nconst react_1 = (0, tslib_1.__importDefault)(require(\"react\"));\n\nconst contexts_1 = require(\"../contexts\");\n\nconst utils_1 = require(\"../utils\");\n\nexports.SignInWithMetamaskButton = (0, contexts_1.withClerk)(_a => {\n  var {\n    clerk,\n    children\n  } = _a,\n      props = (0, tslib_1.__rest)(_a, [\"clerk\", \"children\"]);\n  const {\n    redirectUrl\n  } = props,\n        rest = (0, tslib_1.__rest)(props, [\"redirectUrl\"]);\n  children = (0, utils_1.normalizeWithDefaultValue)(children, 'Sign in with Metamask');\n  const child = (0, utils_1.assertSingleChild)(children)('SignInWithMetamaskButton');\n\n  const clickHandler = async () => {\n    async function authenticate() {\n      await clerk.authenticateWithMetamask({\n        redirectUrl\n      });\n    }\n\n    void authenticate();\n  };\n\n  const wrappedChildClickHandler = async e => {\n    await (0, utils_1.safeExecute)(child.props.onClick)(e);\n    return clickHandler();\n  };\n\n  const childProps = Object.assign(Object.assign({}, rest), {\n    onClick: wrappedChildClickHandler\n  });\n  return react_1.default.cloneElement(child, childProps);\n}, 'SignInWithMetamask');","map":{"version":3,"mappings":";;;;;;;;;AAAA;;AAEA;;AAEA;;AAMaA,mCAA2B,0BACrCC,EAAD,IAImD;MAJlD;AACCC,SADD;AAECC;AAFD,MAESF;MACLG,KAAK,2BAHT,qBAGS;AAER,QAAM;AAAEC;AAAF,MAA2BD,KAAjC;AAAA,QAAwBE,IAAI,uBAAKF,KAAL,EAAtB,eAAsB,CAA5B;AAEAD,UAAQ,GAAG,uCAA0BA,QAA1B,EAAoC,uBAApC,CAAX;AACA,QAAMI,KAAK,GAAG,+BAAkBJ,QAAlB,EAA4B,0BAA5B,CAAd;;AAEA,QAAMK,YAAY,GAAG,YAAW;AAC9B,mBAAeC,YAAf,GAA2B;AACzB,YAAMP,KAAK,CAACQ,wBAAN,CAA+B;AAAEL;AAAF,OAA/B,CAAN;AACD;;AACD,SAAKI,YAAY,EAAjB;AACD,GALD;;AAOA,QAAME,wBAAwB,GAA4B,MAAMC,CAAN,IAAU;AAClE,UAAM,yBAAaL,KAAa,CAACH,KAAd,CAAoBS,OAAjC,EAA0CD,CAA1C,CAAN;AACA,WAAOJ,YAAY,EAAnB;AACD,GAHD;;AAKA,QAAMM,UAAU,mCAAQR,IAAR,GAAY;AAAEO,WAAO,EAAEF;AAAX,GAAZ,CAAhB;AACA,SAAOI,gBAAMC,YAAN,CAAmBT,KAAnB,EAAyDO,UAAzD,CAAP;AACD,CAzBqC,EA0BtC,oBA1BsC,CAA3B","names":["exports","_a","clerk","children","props","redirectUrl","rest","child","clickHandler","authenticate","authenticateWithMetamask","wrappedChildClickHandler","e","onClick","childProps","react_1","cloneElement"],"sources":["/Users/johnkeane/keanelabs/shopping-list/client/node_modules/@clerk/clerk-react/src/components/SignInWithMetamaskButton.tsx"],"sourcesContent":["import React from 'react';\n\nimport { withClerk } from '../contexts';\nimport { SignInWithMetamaskButtonProps, WithClerkProp } from '../types';\nimport {\n  assertSingleChild,\n  normalizeWithDefaultValue,\n  safeExecute,\n} from '../utils';\n\nexport const SignInWithMetamaskButton = withClerk(\n  ({\n    clerk,\n    children,\n    ...props\n  }: WithClerkProp<SignInWithMetamaskButtonProps>) => {\n    const { redirectUrl, ...rest } = props;\n\n    children = normalizeWithDefaultValue(children, 'Sign in with Metamask');\n    const child = assertSingleChild(children)('SignInWithMetamaskButton');\n\n    const clickHandler = async () => {\n      async function authenticate() {\n        await clerk.authenticateWithMetamask({ redirectUrl });\n      }\n      void authenticate();\n    };\n\n    const wrappedChildClickHandler: React.MouseEventHandler = async e => {\n      await safeExecute((child as any).props.onClick)(e);\n      return clickHandler();\n    };\n\n    const childProps = { ...rest, onClick: wrappedChildClickHandler };\n    return React.cloneElement(child as React.ReactElement<unknown>, childProps);\n  },\n  'SignInWithMetamask',\n);\n"]},"metadata":{},"sourceType":"script"}