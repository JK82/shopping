import { UserResource } from '@clerk/types';
import React from 'react';
declare type UserTypes = UserResource | null | undefined;
declare type UserContextValue = {
    value: UserTypes;
};
export declare const UserContext: React.Context<UserContextValue | undefined>;
export declare function useUserContext(): UserContextValue;
declare type UseUserWithAssertionsResponse = {
    user: UserTypes;
    isLoading: (user: UserTypes) => user is undefined;
    isSignedOut: (user: UserTypes) => user is null;
    isSignedIn: (user: UserTypes) => user is UserResource;
};
export declare function useUser(options?: {
    withAssertions: false;
}): UserResource;
export declare function useUser(options: {
    withAssertions: true;
}): UseUserWithAssertionsResponse;
export declare const withUser: <P extends {
    user: UserResource;
}>(Component: React.ComponentType<P>, displayName?: string | undefined) => React.FC<Omit<P, "user">>;
export declare const WithUser: React.FC<{
    children: (user: UserResource) => React.ReactNode;
}>;
export {};
//# sourceMappingURL=UserContext.d.ts.map