{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.withMaxAllowedInstancesGuard = exports.useMaxAllowedInstancesGuard = void 0;\n\nconst tslib_1 = require(\"tslib\");\n\nconst react_1 = (0, tslib_1.__importDefault)(require(\"react\"));\nconst counts = new Map();\n\nfunction useMaxAllowedInstancesGuard(name, error) {\n  let maxCount = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  react_1.default.useEffect(() => {\n    const count = counts.get(name) || 0;\n\n    if (count == maxCount) {\n      throw new Error(error);\n    }\n\n    counts.set(name, count + 1);\n    return () => {\n      counts.set(name, (counts.get(name) || 1) - 1);\n    };\n  }, []);\n}\n\nexports.useMaxAllowedInstancesGuard = useMaxAllowedInstancesGuard;\n\nfunction withMaxAllowedInstancesGuard(WrappedComponent, name, error) {\n  const displayName = WrappedComponent.displayName || WrappedComponent.name || name || 'Component';\n\n  const Hoc = props => {\n    useMaxAllowedInstancesGuard(name, error);\n    return react_1.default.createElement(WrappedComponent, Object.assign({}, props));\n  };\n\n  Hoc.displayName = `withMaxAllowedInstancesGuard(${displayName})`;\n  return Hoc;\n}\n\nexports.withMaxAllowedInstancesGuard = withMaxAllowedInstancesGuard;","map":{"version":3,"mappings":";;;;;;;;;AAAA;AAEA,MAAMA,MAAM,GAAG,IAAIC,GAAJ,EAAf;;AAEA,SAAgBC,2BAAhB,CACEC,IADF,EAEEC,KAFF,EAGc;AAAA,MAAZC,QAAY,uEAAD,CAAC;AAEZC,kBAAMC,SAAN,CAAgB,MAAK;AACnB,UAAMC,KAAK,GAAGR,MAAM,CAACS,GAAP,CAAWN,IAAX,KAAoB,CAAlC;;AACA,QAAIK,KAAK,IAAIH,QAAb,EAAuB;AACrB,YAAM,IAAIK,KAAJ,CAAUN,KAAV,CAAN;AACD;;AACDJ,UAAM,CAACW,GAAP,CAAWR,IAAX,EAAiBK,KAAK,GAAG,CAAzB;AAEA,WAAO,MAAK;AACVR,YAAM,CAACW,GAAP,CAAWR,IAAX,EAAiB,CAACH,MAAM,CAACS,GAAP,CAAWN,IAAX,KAAoB,CAArB,IAA0B,CAA3C;AACD,KAFD;AAGD,GAVD,EAUG,EAVH;AAWD;;AAhBDS;;AAkBA,SAAgBC,4BAAhB,CACEC,gBADF,EAEEX,IAFF,EAGEC,KAHF,EAGe;AAEb,QAAMW,WAAW,GACfD,gBAAgB,CAACC,WAAjB,IACAD,gBAAgB,CAACX,IADjB,IAEAA,IAFA,IAGA,WAJF;;AAKA,QAAMa,GAAG,GAAIC,KAAD,IAAa;AACvBf,+BAA2B,CAACC,IAAD,EAAOC,KAAP,CAA3B;AACA,WAAOE,8BAACQ,gBAAD,EAAiBI,kBAAMD,KAAN,CAAjB,CAAP;AACD,GAHD;;AAIAD,KAAG,CAACD,WAAJ,GAAkB,gCAAgCA,WAAW,GAA7D;AACA,SAAOC,GAAP;AACD;;AAhBDJ","names":["counts","Map","useMaxAllowedInstancesGuard","name","error","maxCount","react_1","useEffect","count","get","Error","set","exports","withMaxAllowedInstancesGuard","WrappedComponent","displayName","Hoc","props","Object"],"sources":["/Users/johnkeane/keanelabs/shopping-list/client/node_modules/@clerk/clerk-react/src/utils/useMaxAllowedInstancesGuard.tsx"],"sourcesContent":["import React from 'react';\n\nconst counts = new Map<string, number>();\n\nexport function useMaxAllowedInstancesGuard(\n  name: string,\n  error: string,\n  maxCount = 1,\n): void {\n  React.useEffect(() => {\n    const count = counts.get(name) || 0;\n    if (count == maxCount) {\n      throw new Error(error);\n    }\n    counts.set(name, count + 1);\n\n    return () => {\n      counts.set(name, (counts.get(name) || 1) - 1);\n    };\n  }, []);\n}\n\nexport function withMaxAllowedInstancesGuard<P>(\n  WrappedComponent: React.ComponentType<P>,\n  name: string,\n  error: string,\n): React.ComponentType<P> {\n  const displayName =\n    WrappedComponent.displayName ||\n    WrappedComponent.name ||\n    name ||\n    'Component';\n  const Hoc = (props: P) => {\n    useMaxAllowedInstancesGuard(name, error);\n    return <WrappedComponent {...(props as P)} />;\n  };\n  Hoc.displayName = `withMaxAllowedInstancesGuard(${displayName})`;\n  return Hoc;\n}\n"]},"metadata":{},"sourceType":"script"}