{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.WithSession = exports.withSession = exports.useSession = exports.useSessionContext = exports.SessionContext = void 0;\n\nconst tslib_1 = require(\"tslib\");\n\nconst react_1 = (0, tslib_1.__importStar)(require(\"react\"));\n\nconst errors_1 = require(\"../errors\");\n\nconst utils_1 = require(\"../utils\");\n\nconst assertHelpers_1 = require(\"./assertHelpers\");\n\nconst StructureContext_1 = require(\"./StructureContext\");\n\nexports.SessionContext = react_1.default.createContext(undefined);\nexports.SessionContext.displayName = 'SessionContext';\n\nfunction useSessionContext() {\n  const sessionCtx = (0, react_1.useContext)(exports.SessionContext);\n  (0, assertHelpers_1.assertWrappedByClerkProvider)(sessionCtx);\n  return sessionCtx;\n}\n\nexports.useSessionContext = useSessionContext;\n\nfunction useSession(options) {\n  const opts = Object.assign({}, options);\n  opts.withAssertions = opts.withAssertions || false;\n  const structureCtx = (0, react_1.useContext)(StructureContext_1.StructureContext);\n  const sessionCtx = useSessionContext();\n\n  if (opts.withAssertions) {\n    const assertions = {\n      isLoading: session => {\n        return session === undefined;\n      },\n      isSignedOut: session => {\n        return session === null;\n      },\n      isSignedIn: session => {\n        return session !== undefined && session !== null;\n      }\n    };\n    const session = sessionCtx.value;\n    return Object.assign({\n      session\n    }, assertions);\n  }\n\n  (0, assertHelpers_1.assertWrappedByClerkProvider)(structureCtx);\n  (0, assertHelpers_1.assertUserGuarantee)(structureCtx.guaranteedUser, 'useSession()');\n  (0, assertHelpers_1.assertUserGuarantee)(sessionCtx.value, 'useSession()');\n  return sessionCtx.value;\n}\n\nexports.useSession = useSession;\n\nconst withSession = (Component, displayName) => {\n  displayName = displayName || Component.displayName || Component.name || 'Component';\n  Component.displayName = displayName;\n\n  const HOC = props => {\n    const structureCtx = (0, react_1.useContext)(StructureContext_1.StructureContext);\n    const sessionCtx = (0, react_1.useContext)(exports.SessionContext);\n\n    if (!(0, utils_1.inBrowser)()) {\n      return null;\n    }\n\n    (0, assertHelpers_1.assertWrappedByClerkProvider)(structureCtx);\n    (0, assertHelpers_1.assertWrappedByClerkProvider)(sessionCtx);\n    const session = sessionCtx.value;\n\n    if (structureCtx.guaranteedUser && session) {\n      return react_1.default.createElement(Component, Object.assign({}, props, {\n        session: session\n      }));\n    }\n\n    if (session) {\n      return react_1.default.createElement(StructureContext_1.StructureContext.Provider, {\n        value: StructureContext_1.StructureContextStates.guaranteedAll\n      }, react_1.default.createElement(Component, Object.assign({}, props, {\n        session: session\n      })));\n    }\n\n    return null;\n  };\n\n  HOC.displayName = `withSession(${displayName})`;\n  return HOC;\n};\n\nexports.withSession = withSession;\n\nconst WithSession = _ref => {\n  let {\n    children\n  } = _ref;\n  return react_1.default.createElement(StructureContext_1.StructureContext.Consumer, null, structureCtx => react_1.default.createElement(exports.SessionContext.Consumer, null, sessionCtx => {\n    if (typeof children !== 'function') {\n      throw new Error(errors_1.hocChildrenNotAFunctionError);\n    }\n\n    (0, assertHelpers_1.assertWrappedByClerkProvider)(structureCtx);\n    (0, assertHelpers_1.assertWrappedByClerkProvider)(sessionCtx);\n    const session = sessionCtx.value;\n\n    if (structureCtx.guaranteedUser && session) {\n      return children(session);\n    }\n\n    if (session) {\n      return react_1.default.createElement(StructureContext_1.StructureContext.Provider, {\n        value: StructureContext_1.StructureContextStates.guaranteedAll\n      }, children(session));\n    }\n\n    return null;\n  }));\n};\n\nexports.WithSession = WithSession;","map":{"version":3,"mappings":"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","names":["exports","react_1","createContext","undefined","displayName","useSessionContext","sessionCtx","useSession","options","opts","withAssertions","structureCtx","StructureContext_1","assertions","isLoading","session","isSignedOut","isSignedIn","value","guaranteedUser","withSession","Component","name","HOC","props","Object","Provider","guaranteedAll","WithSession","children","Consumer","Error","errors_1"],"sources":["/Users/johnkeane/keanelabs/shopping-list/client/node_modules/@clerk/clerk-react/src/contexts/SessionContext.tsx"],"sourcesContent":["import { ActiveSessionResource, SessionResource } from '@clerk/types';\nimport React, { useContext } from 'react';\n\nimport { hocChildrenNotAFunctionError } from '../errors';\nimport { inBrowser } from '../utils';\nimport {\n  assertUserGuarantee,\n  assertWrappedByClerkProvider,\n} from './assertHelpers';\nimport { StructureContext, StructureContextStates } from './StructureContext';\n\ntype SessionTypes = ActiveSessionResource | null | undefined;\ntype SessionContextValue = { value: SessionTypes };\nexport const SessionContext = React.createContext<\n  SessionContextValue | undefined\n>(undefined);\nSessionContext.displayName = 'SessionContext';\n\nexport function useSessionContext(): SessionContextValue {\n  const sessionCtx = useContext(SessionContext);\n  assertWrappedByClerkProvider(sessionCtx);\n  return sessionCtx;\n}\n\ntype UseSessionWithAssertionsResponse = {\n  session: SessionTypes;\n  isLoading: (session: SessionTypes) => session is undefined;\n  isSignedOut: (session: SessionTypes) => session is null;\n  isSignedIn: (session: SessionTypes) => session is ActiveSessionResource;\n};\n\nexport function useSession(options?: {\n  withAssertions: false;\n}): ActiveSessionResource;\nexport function useSession(options: {\n  withAssertions: true;\n}): UseSessionWithAssertionsResponse;\nexport function useSession(options?: {\n  withAssertions: boolean;\n}): ActiveSessionResource | UseSessionWithAssertionsResponse {\n  const opts = { ...options };\n  opts.withAssertions = opts.withAssertions || false;\n\n  const structureCtx = useContext(StructureContext);\n  const sessionCtx = useSessionContext();\n\n  if (opts.withAssertions) {\n    const assertions = {\n      isLoading: (session: SessionTypes): session is undefined => {\n        return session === undefined;\n      },\n      isSignedOut: (session: SessionTypes): session is null => {\n        return session === null;\n      },\n      isSignedIn: (session: SessionTypes): session is ActiveSessionResource => {\n        return session !== undefined && session !== null;\n      },\n    };\n    const session = sessionCtx.value;\n    return { session, ...assertions };\n  }\n\n  assertWrappedByClerkProvider(structureCtx);\n  assertUserGuarantee(structureCtx.guaranteedUser, 'useSession()');\n  assertUserGuarantee(sessionCtx.value, 'useSession()');\n  return sessionCtx.value;\n}\n\nexport const withSession = <P extends { session: SessionResource }>(\n  Component: React.ComponentType<P>,\n  displayName?: string,\n) => {\n  displayName =\n    displayName || Component.displayName || Component.name || 'Component';\n  Component.displayName = displayName;\n\n  const HOC: React.FC<Omit<P, 'session'>> = (props: Omit<P, 'session'>) => {\n    const structureCtx = useContext(StructureContext);\n    const sessionCtx = useContext(SessionContext);\n    if (!inBrowser()) {\n      return null;\n    }\n    assertWrappedByClerkProvider(structureCtx);\n    assertWrappedByClerkProvider(sessionCtx);\n    const session = sessionCtx.value;\n\n    if (structureCtx.guaranteedUser && session) {\n      return <Component {...(props as P)} session={session} />;\n    }\n\n    if (session) {\n      return (\n        <StructureContext.Provider value={StructureContextStates.guaranteedAll}>\n          <Component {...(props as P)} session={session} />\n        </StructureContext.Provider>\n      );\n    }\n\n    return null;\n  };\n\n  HOC.displayName = `withSession(${displayName})`;\n  return HOC;\n};\n\nexport const WithSession: React.FC<{\n  children: (session: SessionResource) => React.ReactNode;\n}> = ({ children }) => (\n  <StructureContext.Consumer>\n    {structureCtx => (\n      <SessionContext.Consumer>\n        {sessionCtx => {\n          if (typeof children !== 'function') {\n            throw new Error(hocChildrenNotAFunctionError);\n          }\n\n          assertWrappedByClerkProvider(structureCtx);\n          assertWrappedByClerkProvider(sessionCtx);\n          const session = sessionCtx.value;\n\n          if (structureCtx.guaranteedUser && session) {\n            return children(session);\n          }\n\n          if (session) {\n            return (\n              <StructureContext.Provider\n                value={StructureContextStates.guaranteedAll}\n              >\n                {children(session)}\n              </StructureContext.Provider>\n            );\n          }\n\n          return null;\n        }}\n      </SessionContext.Consumer>\n    )}\n  </StructureContext.Consumer>\n);\n"]},"metadata":{},"sourceType":"script"}