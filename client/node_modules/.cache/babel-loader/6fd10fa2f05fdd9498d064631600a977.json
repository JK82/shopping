{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ClerkContextWrapper = void 0;\n\nconst tslib_1 = require(\"tslib\");\n\nconst react_1 = (0, tslib_1.__importDefault)(require(\"react\"));\n\nconst ClientContext_1 = require(\"./ClientContext\");\n\nconst IsomorphicClerkContext_1 = require(\"./IsomorphicClerkContext\");\n\nconst SessionContext_1 = require(\"./SessionContext\");\n\nconst UserContext_1 = require(\"./UserContext\");\n\nfunction ClerkContextWrapper(_ref) {\n  let {\n    isomorphicClerk,\n    children,\n    clerkLoaded\n  } = _ref;\n  const clerk = isomorphicClerk;\n  const [state, setState] = react_1.default.useState({\n    client: clerk.client,\n    session: clerk.session,\n    user: clerk.user\n  });\n  react_1.default.useEffect(() => {\n    return clerk.addListener(e => setState(Object.assign({}, e)));\n  }, []);\n  const {\n    client,\n    session,\n    user\n  } = state;\n  const clerkCtx = react_1.default.useMemo(() => ({\n    value: clerk\n  }), [clerkLoaded]);\n  const clientCtx = react_1.default.useMemo(() => ({\n    value: client\n  }), [client]);\n  const sessionCtx = react_1.default.useMemo(() => ({\n    value: session\n  }), [session]);\n  const userCtx = react_1.default.useMemo(() => ({\n    value: user\n  }), [user]);\n  return react_1.default.createElement(IsomorphicClerkContext_1.IsomorphicClerkContext.Provider, {\n    value: clerkCtx\n  }, react_1.default.createElement(ClientContext_1.ClientContext.Provider, {\n    value: clientCtx\n  }, react_1.default.createElement(SessionContext_1.SessionContext.Provider, {\n    value: sessionCtx\n  }, react_1.default.createElement(UserContext_1.UserContext.Provider, {\n    value: userCtx\n  }, react_1.default.createElement(react_1.default.Fragment, {\n    key: session ? session.id : 'no-users'\n  }, children)))));\n}\n\nexports.ClerkContextWrapper = ClerkContextWrapper;","map":{"version":3,"mappings":";;;;;;;;;AACA;;AAGA;;AACA;;AACA;;AACA;;AAUA,SAAgBA,mBAAhB,OAI2B;AAAA,MAJS;AAClCC,mBADkC;AAElCC,YAFkC;AAGlCC;AAHkC,GAIT;AACzB,QAAMC,KAAK,GAAGH,eAAd;AAEA,QAAM,CAACI,KAAD,EAAQC,QAAR,IAAoBC,gBAAMC,QAAN,CAA0C;AAClEC,UAAM,EAAEL,KAAK,CAACK,MADoD;AAElEC,WAAO,EAAEN,KAAK,CAACM,OAFmD;AAGlEC,QAAI,EAAEP,KAAK,CAACO;AAHsD,GAA1C,CAA1B;AAMAJ,kBAAMK,SAAN,CAAgB,MAAK;AACnB,WAAOR,KAAK,CAACS,WAAN,CAAkBC,CAAC,IAAIR,QAAQ,mBAAMQ,CAAN,EAA/B,CAAP;AACD,GAFD,EAEG,EAFH;AAIA,QAAM;AAAEL,UAAF;AAAUC,WAAV;AAAmBC;AAAnB,MAA4BN,KAAlC;AACA,QAAMU,QAAQ,GAAGR,gBAAMS,OAAN,CAAc,OAAO;AAAEC,SAAK,EAAEb;AAAT,GAAP,CAAd,EAAwC,CAACD,WAAD,CAAxC,CAAjB;AACA,QAAMe,SAAS,GAAGX,gBAAMS,OAAN,CAAc,OAAO;AAAEC,SAAK,EAAER;AAAT,GAAP,CAAd,EAAyC,CAACA,MAAD,CAAzC,CAAlB;AACA,QAAMU,UAAU,GAAGZ,gBAAMS,OAAN,CAAc,OAAO;AAAEC,SAAK,EAAEP;AAAT,GAAP,CAAd,EAA0C,CAACA,OAAD,CAA1C,CAAnB;AACA,QAAMU,OAAO,GAAGb,gBAAMS,OAAN,CAAc,OAAO;AAAEC,SAAK,EAAEN;AAAT,GAAP,CAAd,EAAuC,CAACA,IAAD,CAAvC,CAAhB;AAEA,SACEJ,8BAACc,gDAAuBC,QAAxB,EAAgC;AAACL,SAAK,EAAEF;AAAR,GAAhC,EACER,8BAACgB,8BAAcD,QAAf,EAAuB;AAACL,SAAK,EAAEC;AAAR,GAAvB,EACEX,8BAACiB,gCAAeF,QAAhB,EAAwB;AAACL,SAAK,EAAEE;AAAR,GAAxB,EACEZ,8BAACkB,0BAAYH,QAAb,EAAqB;AAACL,SAAK,EAAEG;AAAR,GAArB,EACEb,8BAACA,gBAAMmB,QAAP,EAAe;AAACC,OAAG,EAAEjB,OAAO,GAAGA,OAAO,CAACkB,EAAX,GAAgB;AAA7B,GAAf,EACG1B,QADH,CADF,CADF,CADF,CADF,CADF;AAaD;;AApCD2B","names":["ClerkContextWrapper","isomorphicClerk","children","clerkLoaded","clerk","state","setState","react_1","useState","client","session","user","useEffect","addListener","e","clerkCtx","useMemo","value","clientCtx","sessionCtx","userCtx","IsomorphicClerkContext_1","Provider","ClientContext_1","SessionContext_1","UserContext_1","Fragment","key","id","exports"],"sources":["/Users/johnkeane/keanelabs/shopping-list/client/node_modules/@clerk/clerk-react/src/contexts/ClerkContextWrapper.tsx"],"sourcesContent":["import { ClientResource, Resources } from '@clerk/types';\nimport React from 'react';\n\nimport IsomorphicClerk from '../isomorphicClerk';\nimport { ClientContext } from './ClientContext';\nimport { IsomorphicClerkContext } from './IsomorphicClerkContext';\nimport { SessionContext } from './SessionContext';\nimport { UserContext } from './UserContext';\n\ntype ClerkContextWrapperProps = {\n  isomorphicClerk: IsomorphicClerk;\n  children: React.ReactNode;\n  clerkLoaded: boolean;\n};\n\ntype ClerkContextProviderState = Resources;\n\nexport function ClerkContextWrapper({\n  isomorphicClerk,\n  children,\n  clerkLoaded,\n}: ClerkContextWrapperProps): JSX.Element | null {\n  const clerk = isomorphicClerk;\n\n  const [state, setState] = React.useState<ClerkContextProviderState>({\n    client: clerk.client as ClientResource,\n    session: clerk.session,\n    user: clerk.user,\n  });\n\n  React.useEffect(() => {\n    return clerk.addListener(e => setState({ ...e }));\n  }, []);\n\n  const { client, session, user } = state;\n  const clerkCtx = React.useMemo(() => ({ value: clerk }), [clerkLoaded]);\n  const clientCtx = React.useMemo(() => ({ value: client }), [client]);\n  const sessionCtx = React.useMemo(() => ({ value: session }), [session]);\n  const userCtx = React.useMemo(() => ({ value: user }), [user]);\n\n  return (\n    <IsomorphicClerkContext.Provider value={clerkCtx}>\n      <ClientContext.Provider value={clientCtx}>\n        <SessionContext.Provider value={sessionCtx}>\n          <UserContext.Provider value={userCtx}>\n            <React.Fragment key={session ? session.id : 'no-users'}>\n              {children}\n            </React.Fragment>\n          </UserContext.Provider>\n        </SessionContext.Provider>\n      </ClientContext.Provider>\n    </IsomorphicClerkContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"script"}